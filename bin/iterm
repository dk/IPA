# $Id$

use strict;
use Prima qw(Application MsgBox ComboBox ImageViewer ImageDialog);
$::application-> name( 'ITerm');
$::application-> autoClose(0);
my $w;
my $HOME = defined( $ENV{HOME}) ? $ENV{HOME} : '.';
my $fdo;
my $fds;
my $vec = '';

use IPA::Global qw(/./);
use IPA::Local qw(/./);
use IPA::Geometry qw(/./);
use IPA::Misc qw(/./);
use IPA::Point qw(/./);
use IPA::Morphology qw(/./);


use vars qw($i $j @i @windows);

$i = Prima::Image-> create;
$j = Prima::Image-> create;

package main;

# user routines

sub new
{
   eval "\$$_[0] = Prima::Image-> create();";
}

sub show
{
   my $img = shift;
   $img = $i unless defined $img;
   show_error('Nothing to show'), return unless defined $img;
   $w-> Image-> image( $img);
}

sub clearhistory
{
   $w-> Input-> List-> items([]);
}

sub show_error
{
   $w-> Status-> text( $_[0]);
}

sub load
{
   my $x = Prima::Image-> load( @_);
   if ( $x) {
      $i = $x;
   } else {
      show_error( "error loading: $@");
   }
}

sub save
{
   my $img = shift;
   $img = $i unless defined $img;
   show_error('Nothing to save'), return unless defined $img;
   $img-> save( @_);
   show_error("$@") if $@; 
}


sub quit
{
   $::application-> close;
}

sub zoom
{
   $w-> Image-> zoom( $_[0]);
}

sub window
{
   my $z;
   for ( $z = 0; $z < 32000; $z++) {
      next if vec( $vec, $z, 1);
      vec( $vec, $z, 1) = 1;
      last;
   }
   my $w = Prima::Window-> create(
      name => "Image \$i[$z]",
      menuItems => [['~Image' => [
           [ '~Import' => 'Shift+Ins' => km::Shift | kb::Insert => sub { 
              $_[0]-> Image-> image( $i[ $_[0]->{id}] = $i-> dup); 
           }],
           [ '~Export' => 'Ctrl+Ins' => km::Ctrl | kb::Insert => sub { 
              my $x = $_[0]-> Image-> image; 
              return unless $x;
              $i = $x-> dup;
              show;
           }],
        ],
      ]],
      onDestroy => sub {
         vec( $vec, $_[0]-> {id}, 1) = 0;
      },
   );
   $windows[$z] = $w;
   $w-> {id} = $z;
   $w-> insert( ImageViewer => 
      origin => [0,0],
      size   => [$w-> size],
      hScroll => 1,
      vScroll => 1,
      name    => 'Image',
      quality => 1,
      growMode => gm::Client,
   );
   $w-> select;
   return $w;
}

sub dup
{
   my $img = shift;
   $img = $i unless defined $img;
   show_error('Nothing to dup'), return unless defined $img;
   my $w = window();
   $w-> Image-> image( $i[$w->{id}] = $img-> dup);
}

$w = Prima::Window-> create(
   name => $::application-> name,
   font => { size => 12 },
   onDestroy => sub {
      $::application-> close;
   },
   menuItems =>  [['~Image' => [
      [ '~Open' => 'F3' => 'F3' => sub {
          $fdo = Prima::ImageOpenDialog-> create unless $fdo;
          my $x = $fdo-> load;
          return unless $x;
          $i = $x;
          show;
      }],
      [ '~Save as' => 'F2' => 'F2' => sub {
          return unless $i;
          $fds = Prima::ImageSaveDialog-> create unless $fds;
          $fds-> save( $i);
      }],
      [],
      ['~Duplicate' => 'Ctrl+D' => '^D' => sub { dup(); } ],
   ]]],
);


sub command
{
   my $cmd = $_[0];
   show_error( "");
   if ( $cmd =~ /^(ls|pwd)/) {
      my @ret = split("\n", `$cmd`);
      return unless scalar @ret;
      show_error( $ret[0]);
      print map { "$_\n" } @ret;
      return;
   }
   if ( $cmd =~ /^cd\s*($|\S.*$)/) {
      my $r = length $1 ? $1 : '.';
      chdir $1;
      command('pwd');
      return;
   }
   my @ret;
   eval "{\@ret = $cmd}; die \$\@ if \$\@;";
   show_error($@), return if $@;
   my $ifound;
   for ( @ret) {
      my $z = $_;
      next unless defined $z;
      next unless eval { Prima::Object::alive( $z); };
      next unless $z-> isa( 'Prima::Image');
      if ( $ifound) {
         my $w = window();
         $w-> Image-> image( $i[$w->{id}] = $z);
      } else {
         $i = $z-> dup;
         $ifound = 1;
      }
   }

   $i = Prima::Image-> create if !defined $i || !$i-> isa( 'Prima::Image');
   $j = Prima::Image-> create if !defined $j || !$i-> isa( 'Prima::Image');
   show;
   print "\n" if $cmd =~ /^print/;
}

$w-> insert( Label => 
   width  => $w-> width,
   height => $w-> font-> height,
   bottom => 0,
   left   => 0,
   name   => 'Status',
   text   => '',
   growMode => gm::Floor,
);

my @li = ('quit');
if ( open F, "$HOME/.iterm-list") {
   @li = map { chomp; $_ } <F>; 
   close F;
}

$w-> insert( ComboBox => 
   style  => cs::DropDown,
   width  => $w-> width,
   bottom => $w-> Status-> top + 2,
   left   => 0,
   height => $w-> font-> height + 4,
   text   => '',
   name   => 'Input',
   growMode => gm::Floor,
   editProfile => {
      onKeyDown => sub {
          my ( $self, $code, $key, $mod) = @_;
          if (( $key == kb::Enter) && (( $mod & km::Ctrl & km::Shift & km::Alt) == 0)) {
             my $i = $self-> owner-> List-> items;
             my $t = $self-> text;
             $t =~ s/^\s*//;
             $t =~ s/\s*$//;
             return unless length $t;
             my $found = 0;
             my $ix = 0;
             for ( @$i ) {
                $found = 1, last if $_ eq $t;
                $ix++;
             }
             $self-> owner-> List-> delete_items( $ix) if $found; 
             $self-> owner-> List-> insert_items( 0, $t);
             $self-> text('');
             command( $t);
          }
      },
   },
   listProfile => {
      items => \@li,
      onDestroy => sub {
         if ( open F, "> $HOME/.iterm-list") {
            print F map { "$_\n" } @{$_[0]-> items};
            close F;
         }
      },
   },
);

$w-> insert( ImageViewer => 
   left => 0,
   bottom => $w-> Input-> top + 2,
   width => $w-> width,
   top   => $w-> height,
   hScroll => 1,
   vScroll => 1,
   name    => 'Image',
   quality => 1,
   growMode => gm::Client,
);

#eval { do "$HOME/.iterm-startup"; };
do "$HOME/.iterm-startup";
Prima::MsgBox::message( $@) if @$ ;

command( 'load "' . $ARGV[0] . '"') if @ARGV;

$w-> Input-> select;
while ($::application) {
   eval { run Prima };
   Prima::MsgBox::message( "$@") if $::application && $@;
}

